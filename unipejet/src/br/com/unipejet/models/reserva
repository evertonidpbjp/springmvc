package br.com.unipejet.models;
import java.math.BigDecimal;
import java.util.Arrays;

public class ShoppingItem {

	private Produto product;
	private BookType bookType;
	private Integer productId;
	
	public static ShoppingItem zeroed(){
		Produto product = new Produto();
		Price price = new Price();
		BookType combo = BookType.COMBO;
		price.setBookType(combo);
		price.setValue(BigDecimal.ZERO);
		product.setPrices(Arrays.asList(price));
		return new ShoppingItem(product, combo);
	}

	public ShoppingItem(Produto product, BookType bookType) {
		this.product = product;
		this.bookType = bookType;
		this.productId = product.getId();
	}
	
	public Produto getProduct() {
		return product;
	}
	
	public BookType getBookType() {
		return bookType;
	}
	
	public BigDecimal getPrice(){
		/** Navegue também até a classe Product, para descobrir como é a implementação do método priceFor **/
		return product.priceFor(bookType);
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((bookType == null) ? 0 : bookType.hashCode());
		result = prime * result
				+ ((productId == null) ? 0 : productId.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		ShoppingItem other = (ShoppingItem) obj;
		if (bookType != other.bookType)
			return false;
		if (productId == null) {
			if (other.productId != null)
				return false;
		} else if (!productId.equals(other.productId))
			return false;
		return true;
	}

	public BigDecimal getTotal(Integer quantity) {
		return getPrice().multiply(new BigDecimal(quantity));
	}

}


// Daqui para baixo é a classe de CArrinho

package br.com.unipejet.models;

import java.math.BigDecimal;
import java.util.Collection;
import java.util.LinkedHashMap;
import java.util.Map;

import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.stereotype.Component;
import org.springframework.web.context.WebApplicationContext;

@Component
@Scope(value = WebApplicationContext.SCOPE_SESSION, proxyMode = ScopedProxyMode.TARGET_CLASS)
public class ShoppingCart {

	private Map<ShoppingItem, Integer> items = new LinkedHashMap<ShoppingItem, Integer>();

	public void add(ShoppingItem item) {
		items.put(item, getQuantity(item) + 1);
	}

	public Integer getQuantity(ShoppingItem item) {
		if (!items.containsKey(item)) {
			items.put(item, 0);
		}
		return items.get(item);
	}

	public Integer getQuantity() {
		return items.values().stream()
				.reduce(0, (next, accumulator) -> next + accumulator);
	}

	public Collection<ShoppingItem> getList() {
		return items.keySet();
	}

	public BigDecimal getTotal(ShoppingItem item) {
		return item.getTotal(getQuantity(item));
	}
	
	public BigDecimal getTotal(){
		BigDecimal total = BigDecimal.ZERO;
		//TODO change to reduce?
		for(ShoppingItem item : items.keySet()){
			total = total.add(getTotal(item));
		}
		return total;
	}

	public void remove(ShoppingItem shoppingItem) {
		items.remove(shoppingItem);
	}

	public boolean isEmpty() {
		return items.isEmpty();
	}

}







<%@ page language="java" contentType="text/html; charset=ISO-8859-1"
    pageEncoding="ISO-8859-1"%>





